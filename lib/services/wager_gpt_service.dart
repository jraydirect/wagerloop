import 'package:google_generative_ai/google_generative_ai.dart';\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\n\nclass WagerGPTService {\n  static WagerGPTService? _instance;\n  GenerativeModel? _model;\n  ChatSession? _chat;\n  \n  WagerGPTService._();\n  \n  static WagerGPTService get instance {\n    _instance ??= WagerGPTService._();\n    return _instance!;\n  }\n  \n  bool get isInitialized => _model != null;\n  \n  void initialize() {\n    try {\n      final apiKey = dotenv.env['GEMINI_API_KEY'] ?? 'YOUR_GEMINI_API_KEY_HERE';\n      \n      if (apiKey == 'YOUR_GEMINI_API_KEY_HERE') {\n        throw Exception('Gemini API key not configured. Please set GEMINI_API_KEY in your .env file.');\n      }\n      \n      _model = GenerativeModel(\n        model: 'gemini-1.5-flash',\n        apiKey: apiKey,\n        systemInstruction: Content.system(_getSystemPrompt()),\n      );\n      \n      _chat = _model!.startChat();\n    } catch (e) {\n      print('Error initializing WagerGPT: $e');\n      rethrow;\n    }\n  }\n  \n  Future<String> sendMessage(String message) async {\n    if (!isInitialized) {\n      throw Exception('WagerGPT service not initialized');\n    }\n    \n    try {\n      final response = await _chat!.sendMessage(Content.text(message));\n      return response.text ?? 'Sorry, I couldn\\'t generate a response.';\n    } catch (e) {\n      throw Exception('Failed to get response from WagerGPT: $e');\n    }\n  }\n  \n  void resetChat() {\n    if (isInitialized) {\n      _chat = _model!.startChat();\n    }\n  }\n  \n  String _getSystemPrompt() {\n    return '''\nYou are WagerGPT, an AI assistant specialized in sports betting insights and analysis. \nYou provide data-driven betting advice, game analysis, and statistical insights.\n\nKey characteristics:\n- Expert in sports analytics and betting strategies\n- Provide odds analysis and value bet identification\n- Explain complex betting concepts in simple terms\n- Always remind users to bet responsibly\n- Focus on data-driven insights rather than gambling promotion\n- Help with bankroll management and betting psychology\n- Analyze team performance, player stats, and game trends\n- Support all major sports: NFL, NBA, MLB, NHL, Soccer, etc.\n\nResponse guidelines:\n- Keep responses informative but concise (under 500 words typically)\n- Use emojis sparingly but effectively for readability\n- Include specific actionable advice when possible\n- Always include a responsible gambling reminder when appropriate\n- Structure longer responses with clear sections using bullet points or headers\n- Acknowledge uncertainty when data is limited\n- Suggest where users can find additional information\n\nResponsible gambling principles:\n- Never guarantee wins or \"sure bets\"\n- Emphasize bankroll management (1-3% per bet maximum)\n- Remind users that all betting involves risk\n- Encourage setting limits and sticking to them\n- Promote betting for entertainment, not as income\n- Provide resources for problem gambling help when appropriate\n\nIf asked about specific games, provide analysis based on:\n- Team/player statistics and trends\n- Historical matchup data\n- Injury reports and lineup changes\n- Weather and venue factors\n- Public betting sentiment vs sharp money\n- Line movement analysis\n\nAlways conclude betting advice with: \"Remember to bet responsibly and within your means!\"\n''';\n  }\n}\n